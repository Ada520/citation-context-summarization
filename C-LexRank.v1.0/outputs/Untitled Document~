import math


input =  open("outputs/tempSents.txt"):
inputLines = [x.decode('utf-8').strip('\n').lower() for x in inputFile.readlines()]
sentId = 0
idfDict = getIDFs()

for sent1 in inputLines:
	for sent2 in inputLines:
		print getLexSim(sent1, sent2)
	


def getLexSim(sent1, sent2):
	
	count1 = {}
	count2 = {}

	wordSet1 = sent1.split("\W+")
	
	for word in wordSet1:
		if word in count1:
			count1[word]++
		else:
			count1[word] = 1

	wordSet2 = sent2.split("\W+")

	for word in wordSet2:
		if word in count2:
			count2[word]++
		else:
			count2[word] = 1
	
	
	wordsList = list(set(wordSet1 + wordSet2))
	wordsList.sort()

	c1 = 0
	c2 = 0
	idf = 0
	c = 0
	rs1 = 0
	rs2 = 0

	countC = {}

	for word in wordsList:
		if word in wordSet1:
			c1 = wordSet1[word]
		else:
			c1 = 0

		if word in wordSet2:
			c2 = wordSet2[word]
		else:
			c2 = 0


		if word in idfDict:
			idf = idfDict[word]
		else:	
			idf = 1

		c1 = c1 * idf
		c2 = c2 * idf
	
		c = c + c1*c2

		countC[word] = c1*c2
		
		rs1 = rs1 + c1*c1
		rs2 = rs2 + c2*c2

#	keys = sorted(countC, key = lambda token : countC[token], reverse = True)

#	for key in keys:
		
	r = math.sqrt( rs1 * rs2)
	
	if (r == 0):
		return 0
	else:
		return c/r




def getIDFs():
	with open("idf.txt","r") as idfFile:
		idf = {}
		N = 0

		for line in idfFile:
			line = line.rstrip().split('\t')
			tok = line[0]
			dict[tok] = 0
			idf[tok] = int(line[1])
			N = N + idf[tok]

		
		for token in idf:
			idf[token] = log(N/(1+float(idf[token])))

		return idf
		
		
